/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Access control list.
 */
rule EverybodyCanReadEverything {
  description: "Allow Persons read access to all resources"
  participant: "cn.edu.scnu.Person"
  operation: READ
  resource: "cn.edu.scnu.**"
  action: ALLOW
}

rule SystemAdminCanReadEverything {
  description: "Allow SystemAdmin read access to all resources"
  participant: "cn.edu.scnu.lost.SystemAdmin"
  operation: READ
  resource: "cn.edu.scnu.**"
  action: ALLOW
}

rule SystemAdminCanDoEverything {
  description: "Allow all participants read access to all resources"
  participant: "cn.edu.scnu.lost.SystemAdmin"
  operation: ALL
  resource: "cn.edu.scnu.lost.**"
  action: ALLOW
}

//
// WALLET
rule EverybodyCanCreateAndUpdateHisWallet {
  description: "Allow everybody crate and update his own wallet"
  participant(p): "cn.edu.scnu.Person"
  operation: CREATE, UPDATE
  resource(r): "cn.edu.scnu.lost.WalletAsset"
  transaction(tx): "cn.edu.scnu.lost.**"
  condition: (p.getIdentifier() === r.getIdentifier())
  action: ALLOW
}

rule InitWalletTransaction {
  description: "Person init wallet for coin"
  participant(p): "cn.edu.scnu.Person"
  operation: CREATE
  resource(r): "cn.edu.scnu.lost.InitWalletTransaction"
  condition: (true)
  action: ALLOW
}

//
// GOODS
rule EverybodyCanCreateAndUpdate {
  description: "Allow all participants to crate and update unfinished transactions"
  participant(p): "cn.edu.scnu.Person"
  operation: CREATE, UPDATE
  resource(r): "cn.edu.scnu.lost.GoodsAsset"
  transaction(tx): "cn.edu.scnu.lost.**"
  // IF GOODS IS RETURNED OR CANCELED, IT CAN NOT BE UPDATE
  condition: (r.state !== 'RETURNED' && r.state !== 'CANCELED')
  action: ALLOW
}

rule SubmitLostGoodsTransaction {
  description: "Person who lost a goods submits it to find it"
  participant(p): "cn.edu.scnu.Person"
  operation: CREATE
  resource(r): "cn.edu.scnu.lost.SubmitLostGoodsTransaction"
  condition: (true)
  action: ALLOW
}

rule SubmitFoundGoodsTransaction {
  description: "Person who found a goods submits it to find its owner"
  participant(p): "cn.edu.scnu.Person"
  operation: CREATE
  resource(r): "cn.edu.scnu.lost.SubmitFoundGoodsTransaction"
  condition: (true)
  action: ALLOW
}

rule SubmitRevertedGoodsTransaction {
  description: "Only system Admin submit lost goods infomation when someone retived it"
  participant(p): "cn.edu.scnu.lost.SystemAdmin"
  operation: CREATE
  resource(r): "cn.edu.scnu.lost.SubmitRevertedGoodsTransaction"
  condition: (true)
  action: ALLOW
}

rule PickerFoundTransaction {
  description: "Only picker can find goods when goods is in LOST state"
  participant(p): "cn.edu.scnu.Person"
  operation: CREATE
  resource(r): "cn.edu.scnu.lost.PickGoodsTransaction"
  condition: (true)
  action: ALLOW
}

rule OwnerCanDoCancelTransaction {
  description: "Only owner can cancel when goods is in LOST state"
  participant(p): "cn.edu.scnu.Person"
  operation: CREATE
  resource(r): "cn.edu.scnu.lost.CancelTransaction"
  condition: (r.asset.owner.getIdentifier() === p.getIdentifier())
  action: ALLOW
}

rule PickerRevertTransaction {
  description: "Only picker can revert goods when goods is in FOUND state"
  participant(p): "cn.edu.scnu.lost.SystemAdmin"
  operation: CREATE
  resource(r): "cn.edu.scnu.lost.RevertGoodsTransaction"
  condition: (true)
  action: ALLOW
}

rule OwnerCanReturnedTransaction {
  description: "Only picker can revert goods when goods is in REVERTED state"
  participant(p): "cn.edu.scnu.Person"
  operation: CREATE
  resource(r): "cn.edu.scnu.lost.ReturnBackTransaction"
  condition: (r.asset.owner.getIdentifier() === p.getIdentifier())
  action: ALLOW
}

/*
   Blockchain System Admin
*/

rule SystemACL {
  description: "System ACL to permit all access"
  participant: "org.hyperledger.composer.system.Participant"
  operation: ALL
  resource: "org.hyperledger.composer.system.**"
  action: ALLOW
}

rule NetworkAdminUser {
  description: "Grant business network administrators full access to user resources"
  participant: "org.hyperledger.composer.system.NetworkAdmin"
  operation: ALL
  resource: "**"
  action: ALLOW
}

rule NetworkAdminSystem {
  description: "Grant business network administrators full access to system resources"
  participant: "org.hyperledger.composer.system.NetworkAdmin"
  operation: ALL
  resource: "org.hyperledger.composer.system.**"
  action: ALLOW
}
